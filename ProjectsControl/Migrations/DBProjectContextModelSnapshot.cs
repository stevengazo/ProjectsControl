// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectsControl.Models;

#nullable disable

namespace ProjectsControl.Migrations
{
    [DbContext(typeof(DBProjectContext))]
    partial class DBProjectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ProjectsControl.Models.Action", b =>
                {
                    b.Property<string>("ActionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(340)
                        .HasColumnType("nvarchar(340)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeOfAction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActionId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Actions");

                    b.HasData(
                        new
                        {
                            ActionId = "a9d18897-8d9f-4ac5-b67c-94a2ed051b41",
                            Author = "Sample of author",
                            DateOfCreation = new DateTime(2021, 11, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "sample of description",
                            EmployeeId = "a5aec2b4-ef1a-4545-a151-0fe0cb995955",
                            IsActive = true,
                            Title = "Sample of title",
                            TypeOfAction = "sample of type"
                        });
                });

            modelBuilder.Entity("ProjectsControl.Models.Asistance", b =>
                {
                    b.Property<string>("AsistanceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateOfBegin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfEnd")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProjectId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WeekId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AsistanceId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("WeekId");

                    b.ToTable("Asistances");

                    b.HasData(
                        new
                        {
                            AsistanceId = "c998ce52-0e39-4452-a0b4-652ea4bfa605",
                            DateOfBegin = new DateTime(2021, 11, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            DateOfEnd = new DateTime(2021, 11, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            EmployeeId = "a5aec2b4-ef1a-4545-a151-0fe0cb995955",
                            ProjectId = "1adc9498-6cb1-4ea9-a9e4-f41f090b2c71",
                            WeekId = "01-2010"
                        });
                });

            modelBuilder.Entity("ProjectsControl.Models.Bill", b =>
                {
                    b.Property<string>("BillId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfBill")
                        .HasColumnType("int");

                    b.Property<string>("ProjectId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BillId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Bill");

                    b.HasData(
                        new
                        {
                            BillId = "600c6038-9d27-43c0-9180-cbabcfeeac00",
                            Amount = 1f,
                            Author = "Sample",
                            Currency = "Dolar",
                            DateOfCreation = new DateTime(2021, 11, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            Notes = "Sample of notes",
                            NumberOfBill = 1,
                            ProjectId = "1adc9498-6cb1-4ea9-a9e4-f41f090b2c71"
                        });
                });

            modelBuilder.Entity("ProjectsControl.Models.Customer", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DNIOfCustomer")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("Sector")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = "4bd0eb60-da1b-4df2-bd69-b3a8a5d74031",
                            DNIOfCustomer = 110,
                            Name = "Sample",
                            Sector = "Private"
                        });
                });

            modelBuilder.Entity("ProjectsControl.Models.Employee", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfFired")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateofHiring")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeDNI")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MobileNumber")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Salary")
                        .HasColumnType("real");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = "a5aec2b4-ef1a-4545-a151-0fe0cb995955",
                            DateOfBirth = new DateTime(2021, 11, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            DateOfFired = new DateTime(2021, 11, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            DateofHiring = new DateTime(2021, 11, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "sample@grupomecsa.net",
                            EmployeeDNI = 1171292,
                            IsActive = true,
                            MobileNumber = 888,
                            Name = "Sample of name",
                            Position = "d",
                            Salary = 100f
                        });
                });

            modelBuilder.Entity("ProjectsControl.Models.Expensive", b =>
                {
                    b.Property<string>("ExpensiveId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExpensiveId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Expensives");

                    b.HasData(
                        new
                        {
                            ExpensiveId = "1e757e01-6b71-41b3-98a0-1bc99855476e",
                            Amount = 1.12f,
                            Author = "Sample Of authot",
                            Currency = "Dolar",
                            LastModification = new DateTime(2021, 11, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            Note = "Sample",
                            ProjectId = "1adc9498-6cb1-4ea9-a9e4-f41f090b2c71",
                            Type = "Km Cost"
                        });
                });

            modelBuilder.Entity("ProjectsControl.Models.ExtraHour", b =>
                {
                    b.Property<string>("ExtraHourId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AceptedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AsistanceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BeginTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeOfHour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WeekId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ExtraHourId");

                    b.HasIndex("AsistanceId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("WeekId");

                    b.ToTable("ExtraHours");

                    b.HasData(
                        new
                        {
                            ExtraHourId = "2b3a8dca-98ea-4a1d-b2ba-f98aa7f115a3",
                            AceptedBy = "Nyree",
                            AsistanceId = "c998ce52-0e39-4452-a0b4-652ea4bfa605",
                            BeginTime = new DateTime(2021, 11, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            EmployeeId = "a5aec2b4-ef1a-4545-a151-0fe0cb995955",
                            EndTime = new DateTime(2021, 11, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            IsPaid = false,
                            Notes = "as",
                            Reason = "ad",
                            TypeOfHour = "double",
                            WeekId = "01-2010"
                        });
                });

            modelBuilder.Entity("ProjectsControl.Models.Notes", b =>
                {
                    b.Property<string>("NotesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoteDescription")
                        .IsRequired()
                        .HasMaxLength(340)
                        .HasColumnType("nvarchar(340)");

                    b.Property<string>("ProjectId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("NotesId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Notes");

                    b.HasData(
                        new
                        {
                            NotesId = "3e292944-bba0-44c0-b160-38251a38478e",
                            Author = "Sample",
                            DateOfCreation = new DateTime(2021, 11, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            NoteDescription = "Description of the action",
                            ProjectId = "1adc9498-6cb1-4ea9-a9e4-f41f090b2c71",
                            Title = "Sample"
                        });
                });

            modelBuilder.Entity("ProjectsControl.Models.Of_Quo", b =>
                {
                    b.Property<string>("Of_QuoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsModicable")
                        .HasColumnType("bit");

                    b.Property<string>("OfferId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("QuotationId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Of_QuoId");

                    b.HasIndex("OfferId");

                    b.HasIndex("QuotationId");

                    b.ToTable("Of_Quos");

                    b.HasData(
                        new
                        {
                            Of_QuoId = "f29c3911-225c-4b8a-a230-7ac4ee75ca7e",
                            IsModicable = false,
                            OfferId = "5c075374-517d-4c86-9293-1fd3be9fb069",
                            QuotationId = "001-2010"
                        });
                });

            modelBuilder.Entity("ProjectsControl.Models.Offer", b =>
                {
                    b.Property<string>("OfferId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastEdition")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfOffer")
                        .HasColumnType("int");

                    b.Property<string>("SaleManName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OfferId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Offers");

                    b.HasData(
                        new
                        {
                            OfferId = "5c075374-517d-4c86-9293-1fd3be9fb069",
                            Author = "Sample of Author",
                            CustomerId = "4bd0eb60-da1b-4df2-bd69-b3a8a5d74031",
                            DateOfCreation = new DateTime(2021, 11, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "sample of description",
                            LastEdition = new DateTime(2021, 11, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            NumberOfOffer = 1,
                            SaleManName = "Sample of name",
                            Title = "Title Sample",
                            Type = "installation"
                        });
                });

            modelBuilder.Entity("ProjectsControl.Models.Project", b =>
                {
                    b.Property<string>("ProjectId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Estatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOver")
                        .HasColumnType("bit");

                    b.Property<string>("Manager")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberOfOffer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfProject")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfTask")
                        .HasColumnType("int");

                    b.Property<string>("OC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OCDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("PendingAmount")
                        .HasColumnType("float");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Technician")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeOfJob")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ubication")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            ProjectId = "1adc9498-6cb1-4ea9-a9e4-f41f090b2c71",
                            Amount = 100f,
                            BeginDate = new DateTime(2021, 11, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            Currency = "Dolar",
                            CustomerId = "4bd0eb60-da1b-4df2-bd69-b3a8a5d74031",
                            Details = "Sample of details",
                            EmployeeId = "a5aec2b4-ef1a-4545-a151-0fe0cb995955",
                            EndDate = new DateTime(2021, 11, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            Estatus = "In progress",
                            IsOver = false,
                            Manager = "Sample of Name",
                            NumberOfOffer = "PS1",
                            NumberOfProject = 1,
                            NumberOfTask = 1,
                            OC = "Oc Id Sample",
                            OCDate = new DateTime(2021, 11, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            PendingAmount = 0.0,
                            ProjectName = "Sample Of Project",
                            Technician = "Sample",
                            TypeOfJob = "Sample of Job",
                            Ubication = "San JoseCosta Rica"
                        });
                });

            modelBuilder.Entity("ProjectsControl.Models.Quotation", b =>
                {
                    b.Property<string>("QuotationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("KMAmount")
                        .HasColumnType("real");

                    b.Property<DateTime>("LastModification")
                        .HasColumnType("datetime2");

                    b.Property<float>("MaterialAmount")
                        .HasColumnType("real");

                    b.Property<float>("MecsaAmountMaterial")
                        .HasColumnType("real");

                    b.Property<int>("QuantityOfDays")
                        .HasColumnType("int");

                    b.Property<int>("QuantityOfEmployees")
                        .HasColumnType("int");

                    b.Property<float>("TotalAmount")
                        .HasColumnType("real");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("UnexpectedAmount")
                        .HasColumnType("real");

                    b.Property<string>("UserModification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("ViaticsAmount")
                        .HasColumnType("real");

                    b.HasKey("QuotationId");

                    b.ToTable("Quotations");

                    b.HasData(
                        new
                        {
                            QuotationId = "001-2010",
                            DateCreation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Sample Of Description",
                            KMAmount = 0f,
                            LastModification = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaterialAmount = 0f,
                            MecsaAmountMaterial = 0f,
                            QuantityOfDays = 0,
                            QuantityOfEmployees = 0,
                            TotalAmount = 0f,
                            Type = "Sample",
                            UnexpectedAmount = 0f,
                            ViaticsAmount = 0f
                        });
                });

            modelBuilder.Entity("ProjectsControl.Models.Report", b =>
                {
                    b.Property<string>("ReportId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfReport")
                        .HasColumnType("int");

                    b.Property<string>("ProjectId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReportId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Report");

                    b.HasData(
                        new
                        {
                            ReportId = "ad0c0336-8561-4420-8bf5-0a760dc82779",
                            Author = "Sample of author",
                            BeginDate = new DateTime(2021, 11, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            EndDate = new DateTime(2021, 11, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            Notes = "sample of notes",
                            NumberOfReport = 1,
                            ProjectId = "1adc9498-6cb1-4ea9-a9e4-f41f090b2c71",
                            Status = "sample of estatus"
                        });
                });

            modelBuilder.Entity("ProjectsControl.Models.Week", b =>
                {
                    b.Property<string>("WeekId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BeginOfWeek")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndOfWeek")
                        .HasColumnType("datetime2");

                    b.Property<string>("NumberOfWeek")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WeekId");

                    b.ToTable("Week");

                    b.HasData(
                        new
                        {
                            WeekId = "01-2010",
                            BeginOfWeek = new DateTime(2021, 11, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            EndOfWeek = new DateTime(2021, 11, 22, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("ProjectsControl.Models.Action", b =>
                {
                    b.HasOne("ProjectsControl.Models.Employee", "Employee")
                        .WithMany("Actions")
                        .HasForeignKey("EmployeeId");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("ProjectsControl.Models.Asistance", b =>
                {
                    b.HasOne("ProjectsControl.Models.Employee", "Employee")
                        .WithMany("Asistances")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("ProjectsControl.Models.Project", "Project")
                        .WithMany("Asistances")
                        .HasForeignKey("ProjectId");

                    b.HasOne("ProjectsControl.Models.Week", "Week")
                        .WithMany("Asistances")
                        .HasForeignKey("WeekId");

                    b.Navigation("Employee");

                    b.Navigation("Project");

                    b.Navigation("Week");
                });

            modelBuilder.Entity("ProjectsControl.Models.Bill", b =>
                {
                    b.HasOne("ProjectsControl.Models.Project", "Project")
                        .WithMany("Bills")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectsControl.Models.Expensive", b =>
                {
                    b.HasOne("ProjectsControl.Models.Project", "Project")
                        .WithMany("Expensives")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectsControl.Models.ExtraHour", b =>
                {
                    b.HasOne("ProjectsControl.Models.Asistance", "Asistance")
                        .WithMany("ExtraHours")
                        .HasForeignKey("AsistanceId");

                    b.HasOne("ProjectsControl.Models.Employee", "Employee")
                        .WithMany("ExtraHours")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("ProjectsControl.Models.Week", "Week")
                        .WithMany("ExtraHours")
                        .HasForeignKey("WeekId");

                    b.Navigation("Asistance");

                    b.Navigation("Employee");

                    b.Navigation("Week");
                });

            modelBuilder.Entity("ProjectsControl.Models.Notes", b =>
                {
                    b.HasOne("ProjectsControl.Models.Project", "Project")
                        .WithMany("Notes")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectsControl.Models.Of_Quo", b =>
                {
                    b.HasOne("ProjectsControl.Models.Offer", "Offer")
                        .WithMany("Of_Quos")
                        .HasForeignKey("OfferId");

                    b.HasOne("ProjectsControl.Models.Quotation", "Quotation")
                        .WithMany("Of_Quos")
                        .HasForeignKey("QuotationId");

                    b.Navigation("Offer");

                    b.Navigation("Quotation");
                });

            modelBuilder.Entity("ProjectsControl.Models.Offer", b =>
                {
                    b.HasOne("ProjectsControl.Models.Customer", "Customer")
                        .WithMany("Offers")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ProjectsControl.Models.Project", b =>
                {
                    b.HasOne("ProjectsControl.Models.Customer", "Customer")
                        .WithMany("Projects")
                        .HasForeignKey("CustomerId");

                    b.HasOne("ProjectsControl.Models.Employee", "Employee")
                        .WithMany("Projects")
                        .HasForeignKey("EmployeeId");

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("ProjectsControl.Models.Report", b =>
                {
                    b.HasOne("ProjectsControl.Models.Project", "Project")
                        .WithMany("Reports")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectsControl.Models.Asistance", b =>
                {
                    b.Navigation("ExtraHours");
                });

            modelBuilder.Entity("ProjectsControl.Models.Customer", b =>
                {
                    b.Navigation("Offers");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("ProjectsControl.Models.Employee", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Asistances");

                    b.Navigation("ExtraHours");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("ProjectsControl.Models.Offer", b =>
                {
                    b.Navigation("Of_Quos");
                });

            modelBuilder.Entity("ProjectsControl.Models.Project", b =>
                {
                    b.Navigation("Asistances");

                    b.Navigation("Bills");

                    b.Navigation("Expensives");

                    b.Navigation("Notes");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("ProjectsControl.Models.Quotation", b =>
                {
                    b.Navigation("Of_Quos");
                });

            modelBuilder.Entity("ProjectsControl.Models.Week", b =>
                {
                    b.Navigation("Asistances");

                    b.Navigation("ExtraHours");
                });
#pragma warning restore 612, 618
        }
    }
}
