// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectsControl.Models;

namespace ProjectsControl.Migrations
{
    [DbContext(typeof(DBProjectContext))]
    partial class DBProjectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ProjectsControl.Models.Asistance", b =>
                {
                    b.Property<string>("AsistanceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateOfBegin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfEnd")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProjectId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AsistanceId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Asistances");

                    b.HasData(
                        new
                        {
                            AsistanceId = "01761896-68e6-4e21-856d-7c98f782977b",
                            DateOfBegin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfEnd = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = "56d2c825-78ba-45fe-af15-036dc1f095fb"
                        });
                });

            modelBuilder.Entity("ProjectsControl.Models.Customer", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("Sector")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = "b2abc4a6-e855-4221-b355-532ac1aa3b7c",
                            Name = "SalemanTesting",
                            Sector = "Private"
                        });
                });

            modelBuilder.Entity("ProjectsControl.Models.Employee", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateofHiring")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = "56d2c825-78ba-45fe-af15-036dc1f095fb",
                            DateofHiring = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sample of Employee",
                            Position = "Sample"
                        });
                });

            modelBuilder.Entity("ProjectsControl.Models.ExtraHour", b =>
                {
                    b.Property<string>("ExtraHourId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AsistanceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BeginTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeOfHour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExtraHourId");

                    b.HasIndex("AsistanceId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("ExtraHours");

                    b.HasData(
                        new
                        {
                            ExtraHourId = "4f91bb7a-0730-41eb-8570-a490e801c594",
                            AsistanceId = "01761896-68e6-4e21-856d-7c98f782977b",
                            BeginTime = new DateTime(2021, 7, 19, 20, 27, 39, 470, DateTimeKind.Local).AddTicks(9955),
                            EmployeeId = "56d2c825-78ba-45fe-af15-036dc1f095fb",
                            EndTime = new DateTime(2021, 7, 19, 20, 27, 39, 472, DateTimeKind.Local).AddTicks(5243),
                            IsPaid = true,
                            Reason = "SAMPLE",
                            TypeOfHour = "double"
                        });
                });

            modelBuilder.Entity("ProjectsControl.Models.Project", b =>
                {
                    b.Property<string>("ProjectId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsOver")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int>("NumberOfTask")
                        .HasColumnType("int");

                    b.Property<string>("OC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OCDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OfferId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SalemanId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TypeOfJob")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ubication")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SalemanId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            ProjectId = "4a8e7daf-8b09-44e0-a4b6-111a5b618258",
                            BeginDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = "b2abc4a6-e855-4221-b355-532ac1aa3b7c",
                            Details = "Details sample",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOver = false,
                            Name = "Project Sample",
                            NumberOfTask = 1234,
                            OC = "1234Sample",
                            OCDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OfferId = "1234Sample",
                            SalemanId = "b3175ee2-85de-4e92-9554-50bb8c5de282",
                            TypeOfJob = "installation"
                        });
                });

            modelBuilder.Entity("ProjectsControl.Models.Saleman", b =>
                {
                    b.Property<string>("SalemanId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("SalemanId");

                    b.ToTable("Salemans");

                    b.HasData(
                        new
                        {
                            SalemanId = "b3175ee2-85de-4e92-9554-50bb8c5de282",
                            Name = "CustomerTesting"
                        });
                });

            modelBuilder.Entity("ProjectsControl.Models.Asistance", b =>
                {
                    b.HasOne("ProjectsControl.Models.Employee", "Employee")
                        .WithMany("Asistances")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("ProjectsControl.Models.Project", "Project")
                        .WithMany("Asistances")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Employee");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectsControl.Models.ExtraHour", b =>
                {
                    b.HasOne("ProjectsControl.Models.Asistance", "Asistance")
                        .WithMany("ExtraHours")
                        .HasForeignKey("AsistanceId");

                    b.HasOne("ProjectsControl.Models.Employee", "Employee")
                        .WithMany("ExtraHours")
                        .HasForeignKey("EmployeeId");

                    b.Navigation("Asistance");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("ProjectsControl.Models.Project", b =>
                {
                    b.HasOne("ProjectsControl.Models.Customer", "Customer")
                        .WithMany("Projects")
                        .HasForeignKey("CustomerId");

                    b.HasOne("ProjectsControl.Models.Saleman", "Saleman")
                        .WithMany("Projects")
                        .HasForeignKey("SalemanId");

                    b.Navigation("Customer");

                    b.Navigation("Saleman");
                });

            modelBuilder.Entity("ProjectsControl.Models.Asistance", b =>
                {
                    b.Navigation("ExtraHours");
                });

            modelBuilder.Entity("ProjectsControl.Models.Customer", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("ProjectsControl.Models.Employee", b =>
                {
                    b.Navigation("Asistances");

                    b.Navigation("ExtraHours");
                });

            modelBuilder.Entity("ProjectsControl.Models.Project", b =>
                {
                    b.Navigation("Asistances");
                });

            modelBuilder.Entity("ProjectsControl.Models.Saleman", b =>
                {
                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
